# 문제
'''
처음에 글자 수 대로 A로 셋팅되어있을 때
▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
▶ - 커서를 오른쪽으로 이동
return 위의 조작을 이용해 최소 조작 횟수 값
'''
# 키 포인트
'''
JAJ, JJAJJ JAAJ, JJJJJAAAAAAAAAAAAAAAAAAAAAAAAAAAJJJJJ
ABBBBBAAAAAAABBBBB
그냥 쭉 갔을 때 17
처음 A보자마자 뒤로 갔을 때 17
두 번째 A집합 보고 뒤로 갔을 때 15
=> 이 알고리즘 짜기가 까다롭다.


1. 좌우, 상하 횟수를 분리해 계산한다.
2. 좌우 횟수 계산시 주어진 문자열에서 A무시하고 순회, A가 있을 때마다 뒤로 이동할 때의 가장 최소값을 구한다.
오른쪽으로 쭉 이동한 값 중 작은 값을 구한다.
▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
3. 이 부분을 dic에 키를 알파벳, 값을 횟수로 저장한다.
'''


def solution(name):
    ans = 0
    for i in name:
        if i === 'A':
