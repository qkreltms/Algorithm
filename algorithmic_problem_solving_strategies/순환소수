#include <cstdio>
#include <iostream>
#include <cstring>
#include <map>
#pragma warning(disable: 4996)

/*
링크
문제 : http://judge.koreatech.ac.kr/problem.php?id=1008
참고 : https://tibyte.kr/276

키 포인트
몫이 중복되는 값을 찾기보다 나머지가 중복되는 값을 찾으면 13579/98 = 138.5(61224489...)에서 "2244"처럼
몫이 중복되어도 나머지가 중복되지 않기 때문에 순환소수를 찾을 수 있음 즉, 나머지가 중복되면 순환소수

함수
sprintf(buf, %d, a) :첫 번째 char형 인자에 %d형의 3번째 인자값을 넣어줌
map : key-value pair과 같음
*/
int main() {
	int n, a, b;
	int lenC, lenS;//len Cycle, len String
	char s[100000];
	std::map<int, int> log;
	int k;

	scanf("%d", &n);

	for (; ~scanf("%d%d", &a, &b);) {
		log.clear();
		k = 0; //k값은 소수점 전체길이, 순환소수 길이를 찾을 때 쓰임
		lenC = 0;

		sprintf(s, "%d.", a / b); //소수점 앞부분 값 버퍼에 저장
		lenS = strlen(s);
		a = a % b * 10;

		while (a != 0) {
			log[a] = k++; //나머지를 key 값으로 k 값을 넣는 이유는 나머지 값은 몫이 같아도 예: x.2233... 다름으로 중복되지 않음

			sprintf(s + lenS, "%d", a / b);
			lenS = strlen(s);
			a = a % b * 10;

			if (log.find(a) != log.end()) { //소수가 반복되는 위치 첫 번째 값 찾음
				lenC = k - log[a]; //순환소수 시작점을 전체 소수길이에서 뺌으로써 순환소수 길이 구할 수 있음
				break;
			}
		}

		//반복되는 나머지 값이 없을 때
		if (lenC == 0) {
			sprintf(s + lenS, "(0)");
			printf("%s\n", s);
			continue;
		}

		//%.*s : 인자가 2개 필요, 첫 번째 인자는 출력 범위, 두 번째 인자는 출력할 문자열 예: printf("%.*s\n", 2, "abcdefg"); => "ab"
		//lenS - lenC : 전체길이와 순환소수 길이를 빼면 순환소수를 제외한 길이가 나오므로 그 범위만큼만 출력하게 하면 순환소수를 제외한 값이 나옴
		//s + lenS - lenC : 배열에 int값을 더해주는 이유는 0+x, 즉 x번지 부터 시작하기 위해서
		printf("%.*s(%.*s)\n", lenS - lenC, s, lenC, s + lenS - lenC);
	}

	return 0;
}