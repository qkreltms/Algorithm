#문제
'''
return 연산 처리후 큐가 비어있으면 [0, 0], 비어있지 않으면 [최댓값, 최솟값]
이중우선순위큐를 만든다.
최소값, 최대값을 얻을 수 있어야됨
I 숫자 => 삽입
D 1 => 큐에서 최댓값 삭제
D -1 => 큐에서최솟값 삭제

단, 큐가 비어있을 때 삭제 연산 => 무시
삭제 연산 일 때 최댓값 or 최솟값이 두개 라면 하나만 삭제.
'''
#풀이법
'''
1트
추가되는 값들은 그냥 배열에 저장해 놓는다.
2. 만약, 최댓값을 삭제한다면 그 때 최대 heap을 만들어서(heapify) 하나 삭제한다.
3. 만약, 최솟값을 삭제한다면 그 떄 최소 heap을 만들어서 하나 삭제한다.
출력할 때 2, 3을 실행하는데 만약 배열이 비어있다면 0을 출력, 최댓값 우선(?)
=> heapify 가 log(n)

2트
값을 먼저 다 받은 후 그 값을 
내림차순 정렬한 배열을(A) 하나 만든다
min heap을 하나 만든다.
visited = []
만약 최대값을 삭제한다면 A에서 pop(0) 해주고 visited에 넣어준다.
만약 최솟값을 삭제한다면 heap에서 pop()을 해주고 그 값이 visited 안에 있는지 확인한다.(for 문 쓰는게 빠를 듯)
만약 그 값이 visited에 있다면 flag 를 false로 주고 모든 데이터가 삭제됐다고 판단한다. => 다음 삭제시 둘 다 무조건 무시

3트
왜 힙을 써야되지???
그냥 정렬된 배열 하나 두고 앞, 뒤 가리키는 포인터 두고 자르면 되는거 아닌가?
'''
import heapq
def solution(ops):
    myAry = []
    heap = []